openapi: 3.0.0
info:
  title: api
  description: API for  project
  version: 1.0.0
tags:
  - name: Users
  - name: Auth
  - name: League
  - name: Players
  - name: Teams
  - name: Games
  - name: Coaches
paths:
  /Register:
    post:
      tags:
        - Auth
      summary: Add new user
      description: A new user from the client is added to the server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
        '404': 
          description: the user does not exist.
        '500':
          description: the server has encountered a situation it doesnt know how to handle.
  /Login:
    post:
      tags:
        - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginScheme"
      responses:
        "200":
          description: >
            User was found in the DB and authenitcated successfully.
            The session ID is returned in a cookie named `session`. 
            You should include this cookie in subsequent requests
          # headers:
          #   Set-Cookie:
          #     schema:
          #       type: string
          #       example: session=87s97sdhgf279293f8w0e9
          # Note that the Set-Cookie header and securitySchemes are not connected in any way, and the Set-Header definition is for documentation purposes only.
        "401":
          description: Authentication failed
        '500':
          description: the server has encountered a situation it doesnt know how to handle.
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /league/getDetails:
    get:
      tags:
        - League
      summary: Return the details about the current league
      responses:
        "200":
          description: data about the current league returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/League"
        "400":
          description: wrong input parameters
  /users/favoritePlayers:
    get:
      tags:
        - Users
        - Players
      summary: Return the favorite players that were saved by user
      parameters:
      responses:
        "200":
          description: data about the user's favorites players returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerPreview"
        "401":
          description: user is not authorized
    post:
      summary: save player in the favorites list of a user
      tags:
        - Users
        - Players
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                playerId:
                  type: string
                  description: player's id which the user saved
                  example: 85
      responses:
        "201":
          description: The player successfully saved as favorite
        "401":
          description: user is not authorized
  /teams/teamFullDetails/{teamId}:
    get:
      summary: get full details about a team
      description: useful for team page
      tags:
        - Teams
      parameters:
        - in: path
          name: teamId
          description: team's id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: data about the team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "404":
          description: teamId is not exists
  /teams/teamFullDetails/search/{teamName}:
    get:
      summary: get full details about a team
      description: useful for team page
      tags:
        - Teams
      parameters:
        - in: path
          name: teamId
          description: team's id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: data about the team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "404":
          description: teamId is not exists
  /players/playerFullDetails/{playerId}:
    summary: Represents a specific player
    description: >
      This resource represents an individual player in the system.
      Each player is identified by their full name.
    tags:
      - Players
    get:
      description: Gets a player by his id.
      operationId: getPlayerById
      parameters:
        - in: path
          name: playerId
          description: player's id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful presenting the player page
          content:
            application/json:
              schema:
                properties:
                  playerData:
                    $ref: '#/components/schemas/PlayerPreview'
                  personalData:
                    $ref: '#/components/schemas/PlayerPostview'
        '400':
            description: Wrong input parameters  
  /coaches/coachFullsDetails/{coachId}:
    summary: Represents a specific coach
    description: >
      This resource represents an individual coach in the system.
      Each coach is identified by their full name.
    tags:
      - Coaches
    get:
      description: Gets a coach by his id.
      operationId: getCoachById
      parameters:
        - in: path
          name: coachId
          description: coach's id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful presenting the coach page
          content:
            application/json:
              schema:
                properties:
                  playerData:
                    $ref: '#/components/schemas/CoachPreview'
                  personalData:
                    $ref: '#/components/schemas/CoachPostview'
        '400':
            description: Wrong input parameters  
  /games/gamesOfTheSeason:
    get:
      tags:
        - Games
      summary: Get all data of games of this season
      description: Get arrays of games of this season
      responses:
        '200':
          description: Data of past games
          content:
           application/json:
            schema:
              properties:
                pastGames:
                  type: array
                  items:
                    $ref: '#/components/schemas/PastGame'
                futureGames:
                  type: array
                  items:
                    $ref: '#/components/schemas/FutureGame'
        '400':
          description: Wrong input parameters      
  /league/addGame:
     post:
      tags:
        - League
        - Games
      summary: adding a game to the system
      description: representor of the "unit of soccer" adding a game to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FutureGame"
      responses:
        "201":
          description:  a new game added to the system
        "401":
          description: Authentication failed
        '500':
          description: the server has encountered a situation it doesnt know how to handle.

  
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: ladygaga
        firstName:
          type: string
          description: user's first name
          example: Stefani
        lastName:
          type: string
          description: user's last name
          example: Germanotta
        country:
          type: string
          description: user's country
          example: USA
        password:
          maxLength: 10
          minLength: 5
          type: string
          description:
            password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: lady@56
        email:
          pattern: email
          type: string
          description: user's email
          example: ladygaga@gmail.com
        imageUrl:
          pattern: URL
          type: string
          description: URL for the user's image
          example: https://cloudinary.com/
        title:
          description: user's title
          type: string
          example: referee
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username conatins letters only
          example: naorbe
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: password conatins at least one number and one special char
          example: naor@55
    League:
      type: object
      properties:
        league_name:
          type: string
          description: league name
          example: Superliga
        current_season_name:
          type: string
          description: current season name
          example: "2020/2021"
        current_stage_name:
          type: string
          description: current stage name
          example: Championship Round
    PlayerPreview:
      type: object
      properties:
        fullName:
          type: string
          description: player's full name
          example: Sten Michael Grytebust
        imageUrl:
          type: string
          description: player's image
          format: URL
          example: https://cdn.sportmonks.com/images/soccer/players/11/84587.png
        positionNum:
          type: integer
          description: player's position in team
          example: 1
        teamName:
          type: string
          description: player's team name
          example: København
    PlayerPostview:
      type: object
      description: A JSON object contains all the personal details of a coah or a player.
      properties:
          commonName:
            type: string
            description: name by which the player is commonly refered to by
            example: Diego Maradona
          nationality:
            type: string
            description: the player's nationality
            example: Israeli
          birthdate:
            type: string
            format: date
            description: the date of the player's birth
            example: "1994-06-23"
          birthCountry:
            type: string
            description: > 
              the country of the user 
            example:  Bikini Bottom
          height:
            type: string
            description: the player's height in cm
            example: 1.74cm
          
          weight:
            type: string
            description: the player's weight in kg
            example: 89kg
    CoachPreview:
      type: object
      properties:
        fullName:
          type: string
          description: player's full name
          example: Sten Michael Grytebust
        imageUrl:
          type: string
          description: player's image
          format: URL
          example: https://cdn.sportmonks.com/images/soccer/players/11/84587.png
        positionNum:
          type: integer
          description: player's position in team
          example: 1
        teamName:
          type: string
          description: player's team name
          example: København   
    CoachPostview:
      type: object
      description: A JSON object contains all the personal details of a coach or a player.
      properties:
          Nationality:
            type: string
            description: the player's nationality
            example: Israeli
          Birthdate:
            type: string
            format: date
            description: the date of the player's birth
            example: "1994-06-28"
          BirthCountry:
            type: string
            description: > 
              the country of the user 
            example:  Bikini Bottom
    FutureGame:
      type: object
      description: an object containing all info of Game yet to occur
      properties:
        home_team_id:
          type: integer
          example: 6
        away_team_id:
          type: integer
          example: 939
        game_date:
          type: string
          format: date
          description: the date in which the game occurred
          example: "2021-05-16"
        fieldId:
          type: int
          description: the id of the field the game was played on
          example: 2  
        refereeId:
          type: int
          description:  id of the referee of the game
          example: 12 
    PastGame:
      type: object
      description: an object containing all info of Game that occurred
      properties:
        home_team_id:
          type: integer
          example: 6
        away_team_id:
          type: integer
          example: 939
        game_date:
          type: string
          format: date
          description: the date in which the game occurred
          example: "2021-05-16"
        h_score:
          type: integer
          description: number of goals made by home team
          example: 10
          minimum: 0
        a_score:
          type: integer
          description: number of goals made by away team
          example: 7
          minimum: 0
        fieldId:
          type: int
          description: the field the game was played on
          example: 12
        refereeId:
          type: int
          description:  id of the referee of the game
          example: 12 
        Events:
          type: array
          description: all the events that occured in the game
          items:
            properties:
              event:
                type: string
                description: an event that occured in the game
                example: red flag to Messi
              
              Time:
                type: string
                description: the time in the game in which the value occured
                example: 15.48
                minimum: 0.0 
                maximum: 23.59
                
              minuteOfGame:
                type: string
                description: the minute in the game in which the value occured
                example: 35
                minimum: 0
              
              descriptionOfEvent:
                type: string
                description: the description of the event
                example: 35
                minimum: 0
                
          minLength: 3     
    Team:
      type: object
      properties:
        name:
          type: string
          description: team name
          example: København
        players:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/PlayerPreview"
        teamCoach:
          type: object
          description: the team coach
          properties:
            Name:
              $ref: '#/components/schemas/CoachPreview'
        teamLogo:
          type: string
          format: URL
          description: >
              URL of the image of the user.
          example:  https://cloudinary.com/RealMadrid
